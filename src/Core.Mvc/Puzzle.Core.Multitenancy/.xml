<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzle.Core.Multitenancy</name>
    </assembly>
    <members>
        <member name="T:Puzzle.Core.Multitenancy.ExcludeFromCodeCoverageAttribute">
            <summary>
            Attribute to exclude from code coverage.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Extensions.MultitenancyHttpContextExtensions">
            <summary>
            Multitenant extensions for <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Extensions.MultitenancyServiceCollectionExtensions.AddMultitenancy``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
             <summary>
             https://github.com/saaskit/saaskit/issues/68
             https://github.com/saaskit/saaskit/pull/69/files
            
             https://github.com/aspnet/HttpAbstractions/blob/ab0185a0b8d0b7a80a6169fd78a45f00a28e057d/src/Microsoft.AspNetCore.Http.Extensions/UriHelper.cs.
             </summary>
             <typeparam name="TTenant">The Tenant class.</typeparam>
             <typeparam name="TResolver">The Resolver which resoles tenant.</typeparam>
             <param name="services">An IServiceCollection.</param>
             <returns>IServiceCollection.</returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Extensions.OptionsExtensions.AddMultitenancyOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Puzzle.Core.Multitenancy.Internal.Configurations.MultiTenancyConfig)">
            <summary>
            Add MultitenanCy Options.
            </summary>
            <param name="services">An IServiceCollection.</param>
            <param name="multitenancyConfig">The object which containd multitenant config.</param>
            <returns>IServiceCollection.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Extensions.WebHostBuilderExtensions">
            <summary>
            Extensions methos for add multitenancy in new or existings applications.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Extensions.WebHostBuilderExtensions.UseUnobtrusiveMulitenancyStartup``1(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add multitenancy feature.
            </summary>
            <typeparam name="TStartup">The stratup class.</typeparam>
            <param name="hostBuilder">The hostbuilder class.</param>
            <param name="multitenancyConfiguration">The configuration which contains MultitenancyOptions.</param>
            <returns>IWebHostBuilder.</returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Extensions.WebHostBuilderExtensions.UseUnobtrusiveMulitenancyStartup``3(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add multitenancy feature.
            </summary>
            <typeparam name="TStartup">The stratup class.</typeparam>
            <typeparam name="TTenant">The tenant class.</typeparam>
            <typeparam name="TResolver">The Resolver tenant.</typeparam>
            <param name="hostBuilder">hostBuilder.</param>
            <param name="multitenancyConfiguration">The configuration which contains MultitenancyOptions.</param>
            <returns>IWebHostBuilder.</returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Extensions.WebHostBuilderExtensions.UseUnobtrusiveMulitenancyStartupWithDefaultConvention``1(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            Add multitenancy feature.
            </summary>
            <typeparam name="TStartup">The stratup class.</typeparam>
            <param name="hostBuilder">hostBuilder.</param>
            <returns>IWebHostBuilder.</returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Extensions.WebHostBuilderExtensions.UseUnobtrusiveMulitenancyStartup``3(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Type,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add multitenancy feature.
            </summary>
            <typeparam name="TStartup">The stratup class.</typeparam>
            <typeparam name="TTenant">The tenant class.</typeparam>
            <typeparam name="TResolver">The Resolver tenant.</typeparam>
            <param name="hostBuilder">hostBuilder.</param>
            <param name="startupType">The type of the startup class.</param>
            <param name="multitenancyConfiguration">The configuration which contains MultitenancyOptions.</param>
            <returns>IWebHostBuilder.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.AppTenant">
            <summary>
            The tenant object.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.AppTenant.Name">
            <summary>
            Gets or sets the name of tenant.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.AppTenant.Id">
            <summary>
            Gets the id of tenant, thid must be unique.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.AppTenant.Hostnames">
            <summary>
            Gets or sets list of hostname hosted by tenant.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.AppTenant.Theme">
            <summary>
            Gets or sets theme of tenant.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.AppTenant.ConnectionString">
            <summary>
            Gets or sets connection string of tenant.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.AppTenant.GenerateSlug(System.String)">
            <summary>
            Credit for this method goes to http://stackoverflow.com/questions/2920744/url-slugify-alrogithm-in-cs.
            </summary>
            <param name="value">value.</param>
            <returns>string.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.ILog`1">
            <summary>
            A generic interface for logging where the category name is derived from the specified
            <typeparamref name="TCategoryName"/> type name.
            Generally used to enable activation of a named <see cref="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILog"/> from dependency injection.
            </summary>
            <typeparam name="TCategoryName">The type who's name is used for the logger category name.</typeparam>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.DisposableAction">
            <summary>
            DisposableAction.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.Logger">
            <summary>
            Delegate for logging.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILog.Log(Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
             <summary>
             Log a message the specified log level.
             </summary>
             <param name="logLevel">The log level.</param>
             <param name="messageFunc">The message function.</param>
             <param name="exception">An optional exception.</param>
             <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
             <returns>true if the message was logged. Otherwise false.</returns>
             <remarks>
             Note to implementers: the message func should not be called if the loglevel is not enabled
             so as not to incur performance penalties.
            
             To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
             </remarks>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILog"/>
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogExtensions">
            <summary>
            Extenisons methos for class ILog.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LoggerExecutionWrapper">
            <summary>
            LoggerExecutionWrapper.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="F:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogLevel.Trace">
            <summary>
            Trace.
            </summary>
        </member>
        <member name="F:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogLevel.Debug">
            <summary>
            Debug.
            </summary>
        </member>
        <member name="F:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogLevel.Info">
            <summary>
            Info.
            </summary>
        </member>
        <member name="F:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogLevel.Warn">
            <summary>
            Warn.
            </summary>
        </member>
        <member name="F:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogLevel.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogLevel.Fatal">
            <summary>
            Fatal.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILog" /> objects.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider.SetCurrentLogProvider(Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILogProvider)"/>
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider.SetCurrentLogProvider(Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of. <see cref="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILog"/></returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead.</param>
            <returns>An instance of. <see cref="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILog"/></returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of. <see cref="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILog"/></returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.ColoredConsoleLogProvider">
            <summary>
            Provider for build logger for console.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.ColoredConsoleLogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified console named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.ColoredConsoleLogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.ColoredConsoleLogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.EntLibLogProvider">
            <summary>
            EntLibLogProvider
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.Log4NetLogProvider">
            <summary>
            Log4NetLogProvider.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.LogMessageFormatter">
            <summary>
            LogMessageFormatter.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
             <summary>
             Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
             For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually
             used. So, this class simulates that. it will replace any text in {curly braces} with an index number.
            
             "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
             </summary>
             <param name="messageBuilder">The message builder.</param>
             <param name="formatParameters">The format parameters.</param>
             <returns>Func of string.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.LogProviderBase">
            <summary>
            LogProviderBase.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.LoupeLogProvider">
            <summary>
            LoupeLogProvider.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using.
            </summary>
            <param name="severity">severity.</param>
            <param name="logSystem">logSystem.</param>
            <param name="skipFrames">skipFrames.</param>
            <param name="exception">exception.</param>
            <param name="attributeToException">attributeToException.</param>
            <param name="writeMode">writeMode.</param>
            <param name="detailsXml">detailsXml.</param>
            <param name="category">category.</param>
            <param name="caption">caption.</param>
            <param name="description">description.</param>
            <param name="args">args.</param>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.NLogLogProvider">
            <summary>
            NLogLogProvider.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.SerilogLogProvider">
            <summary>
            SerilogLogProvider.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.TraceEventTypeValues">
            <summary>
            TraceEventTypeValues.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.LogProviders.TypeExtensions">
            <summary>
            TypeExtensions.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Logging.Log`1">
            <summary>
            A generic interface for logging where the category name is derived from the specified
            <typeparamref name="T"/> type name.
            Generally used to enable activation of a named <see cref="T:Puzzle.Core.Multitenancy.Internal.Logging.LibLog.ILog"/> from dependency injection.
            </summary>
            <typeparam name="T">The type who's name is used for the logger category name.</typeparam>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Middlewares.MultitenancyRequestServicesContainerMiddleware`1.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware using the specified context.
            </summary>
            <param name="httpContext">
            The request context to process through the middleware.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> to await for completion of the operation.
            </returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptions">
            <summary>
            Options for multitenancy.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptions"/> class.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptions.AppTenantFolder">
            <summary>
            Gets or sets tenant's folder.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptions.OtherTokens">
            <summary>
            Gets or sets tokens replacement.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptions.Tenants">
            <summary>
            Gets or sets list of tenant.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptionsSetup">
            <summary>
            https://shazwazza.com/post/using-aspnet5-optionsmodel/
            https://github.com/Shazwazza/Smidge/blob/master/src/Smidge/Options/SmidgeOptionsSetup.cs
            https://rimdev.io/strongly-typed-configuration-settings-in-asp-net-core-part-ii/
            http://henkmollema.github.io/advanced-options-configuration-in-asp.net-core/
            https://andrewlock.net/access-services-inside-options-and-startup-using-configureoptions/
            http://blog.soat.fr/2015/09/asp-net-5-la-librairie-optionsmodel/.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptionsSetup.ConfigureMultitenancyOptions(Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Set the default options.
            </summary>
            <param name="options">The MultitenancyOptions.</param>
            <param name="config">The configuration which contains MultitenancyOptions.</param>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptionsSetup.Configure(Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptions)">
            <summary>
            Allows for configuring the options instance before options are set.
            </summary>
            <param name="options">The MultitenancyOptions.</param>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyPostConfigureOptions">
            <summary>
            Represents something that post configures the MultitenancyOptions type.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyPostConfigureOptions.TokenList">
            <summary>
            Gets list of tokens replacement.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyPostConfigureOptions.PostConfigure(System.String,Puzzle.Core.Multitenancy.Internal.Options.MultitenancyOptions)">
            <summary>
            Invoked to configure a MultitenancyOptions instance.
            </summary>
            <param name="name">The name of the options instance being configured.</param>
            <param name="options">The MultitenancyOptions instance to configured.</param>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Options.MultitenancyPostConfigureOptions.DumpToJsonString(System.Object)">
            <summary>
            Convert object To Json String.
            </summary>
            <param name="obj">The object.</param>
            <returns>The json as string.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Resolvers.ITenantResolver`1">
            <summary>
            Resolver for tenant.
            </summary>
            <typeparam name="TTenant">Tenant object.</typeparam>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Resolvers.ITenantResolver`1.ResolveAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Resolve tenant within HttpContext.
            </summary>
            <param name="context">httpcontext.</param>
            <returns>Tenant's context.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.Resolvers.MemoryCacheTenantResolverOptions">
            <summary>
            Configuration options for <see cref="T:Puzzle.Core.Multitenancy.Internal.Resolvers.MemoryCacheTenantResolver`1"/>.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.Resolvers.MemoryCacheTenantResolverOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Puzzle.Core.Multitenancy.Internal.Resolvers.MemoryCacheTenantResolverOptions"/> class.
            Creates a new <see cref="T:Puzzle.Core.Multitenancy.Internal.Resolvers.MemoryCacheTenantResolverOptions"/> instance.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.Resolvers.MemoryCacheTenantResolverOptions.EvictAllEntriesOnExpiry">
            <summary>
            Gets or sets a value indicating whether gets or sets a setting that determines whether all cache entries for a <see cref="T:Puzzle.Core.Multitenancy.TenantContext`1"/>
            instance should be evicted when any of the entries expire. Default: True.
            </summary>
            <value>
            A value indicating whether gets or sets a setting that determines whether all cache entries for a <see cref="T:Puzzle.Core.Multitenancy.TenantContext`1"/>
            instance should be evicted when any of the entries expire. Default: True.
            </value>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.Resolvers.MemoryCacheTenantResolverOptions.DisposeOnEviction">
            <summary>
            Gets or sets a value indicating whether gets or sets a setting that determines whether cached tenant context instances should be disposed
            when upon eviction from the cache. Default: True.
            </summary>
            <value>
            A value indicating whether gets or sets a setting that determines whether cached tenant context instances should be disposed
            when upon eviction from the cache. Default: True.
            </value>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.StartupFilters.MultitenantRequestStartupFilter`2">
            <summary>
            The StartupFilter for multitenant.
            </summary>
            <typeparam  name="TStartup">The startup class.</typeparam >
            <typeparam  name="TTenant">The tenant object.</typeparam >
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.StartupLoaderMultitenant.FindMethod(System.Type,System.String,System.String,System.Type)">
            <summary>
            Take from :https://github.com/aspnet/Hosting/blob/rel/1.1.0/src/Microsoft.AspNetCore.Hosting/Internal/StartupLoader.cs.
            </summary>
            <param name="startupType">The type of the Startup Class.</param>
            <param name="methodName">The name of method to find in startup class.</param>
            <param name="environmentName">The environment(Dev,etc..).</param>
            <param name="returnType">The type of return method.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.Internal.TenantWrapper`1">
            <summary>
            ITenant wrapper that returns the tenant instance.
            </summary>
            <typeparam name="TTenant">The tenant object.</typeparam>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.Internal.TenantWrapper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Puzzle.Core.Multitenancy.Internal.TenantWrapper`1"/> class.
            Intializes the wrapper with the tenant instance to return.
            </summary>
            <param name="tenant">The tenant instance to return.</param>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.Internal.TenantWrapper`1.Value">
            <summary>
            Gets the tenant instance.
            </summary>
            <value>
            The tenant instance.
            </value>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.ITenant`1">
            <summary>
            Used to retreive configured TTenant instances.
            </summary>
            <typeparam name="TTenant">The type of tenant being requested.</typeparam>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.ITenant`1.Value">
            <summary>
            Gets tenant object.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.TenantContext`1">
            <summary>
            Context of the tenant.
            </summary>
            <typeparam name="TTenant">Tenant object.</typeparam>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.TenantContext`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Puzzle.Core.Multitenancy.TenantContext`1"/> class.
            </summary>
            <param name="tenant">Tenant object.</param>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.TenantContext`1.Id">
            <summary>
            Gets uniqueId that identify the tenant.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.TenantContext`1.Tenant">
            <summary>
            Gets tenant object.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.TenantContext`1.Properties">
            <summary>
            Gets additional store data for a tenant.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.TenantContext`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.TenantContext`1.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Puzzle.Core.Multitenancy.TenantPipelineBuilderContext`1">
            <summary>
            Class that store contect of TenantPipeline.
            </summary>
            <typeparam name="TTenant">Tenant object.</typeparam>
        </member>
        <member name="M:Puzzle.Core.Multitenancy.TenantPipelineBuilderContext`1.#ctor(Puzzle.Core.Multitenancy.TenantContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Puzzle.Core.Multitenancy.TenantPipelineBuilderContext`1"/> class.
            </summary>
        </member>
        <member name="P:Puzzle.Core.Multitenancy.TenantPipelineBuilderContext`1.Tenant">
            <summary>
            Gets tenant object.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.UsePerTenantApplicationBuilderExtensions">
            <summary>
            Extensions to use UsePerTenant.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UsePerTenantApplicationBuilderExtensions.UsePerTenant``1(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Puzzle.Core.Multitenancy.TenantPipelineBuilderContext{``0},Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            Configure action per tenant.
            </summary>
            <typeparam name="TTenant">Tenant object.</typeparam>
            <param name="app">Defines a class that provides the mechanisms to configure an application's request.</param>
            <param name="configuration">Define a configuration per tenant.</param>
            <returns>IApplicationBuilder.</returns>
        </member>
    </members>
</doc>
