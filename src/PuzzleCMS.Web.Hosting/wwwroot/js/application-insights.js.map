{"version":3,"sources":["snippet.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"application-insights.js","sourcesContent":["var appInsights = window.appInsights || (function(aiConfig) {\r\n    var appInsights = {\r\n        config: aiConfig\r\n    };\r\n\r\n    // Assigning these to local variables allows them to be minified to save space:\r\n    var localDocument = document;\r\n    var localWindow = window;\r\n    var scriptText = \"script\";\r\n    var userContext = \"AuthenticatedUserContext\";\r\n    var start = \"start\";\r\n    var stop = \"stop\";\r\n    var track = \"Track\";\r\n    var trackEvent = track + \"Event\";\r\n    var trackPage = track + \"Page\";\r\n    var scriptElement = localDocument.createElement(scriptText);\r\n    scriptElement.src = aiConfig.url || \"CDN_PATH\";\r\n    localDocument.getElementsByTagName(scriptText)[0].parentNode.appendChild(scriptElement);\r\n\r\n    // capture initial cookie\r\n    try {\r\n        appInsights.cookie = localDocument.cookie;\r\n    } catch (e) {}\r\n\r\n    appInsights.queue = [];\r\n    appInsights.version = \"1.0\";\r\n\r\n    function createLazyMethod(name) {\r\n        // Define a temporary method that queues-up a the real method call\r\n        appInsights[name] = function() {\r\n            // Capture the original arguments passed to the method\r\n            var originalArguments = arguments;\r\n            // Queue-up a call to the real method\r\n            appInsights.queue.push(function() {\r\n                // Invoke the real method with the captured original arguments\r\n                appInsights[name].apply(appInsights, originalArguments);\r\n            });\r\n        }\r\n    };\r\n\r\n    var method = [\"Event\", \"Exception\", \"Metric\", \"PageView\", \"Trace\", \"Dependency\"];\r\n    while (method.length) {\r\n        createLazyMethod(\"track\" + method.pop());\r\n    }\r\n\r\n    createLazyMethod(\"set\" + userContext);\r\n    createLazyMethod(\"clear\" + userContext);\r\n\r\n    createLazyMethod(start + trackEvent);\r\n    createLazyMethod(stop + trackEvent);\r\n\r\n    createLazyMethod(start + trackPage);\r\n    createLazyMethod(stop + trackPage);\r\n\r\n    createLazyMethod(\"flush\");\r\n\r\n    // collect global errors\r\n    if (!aiConfig.disableExceptionTracking) {\r\n        method = \"onerror\";\r\n        createLazyMethod(\"_\" + method);\r\n        var originalOnError = localWindow[method];\r\n        localWindow[method] = function(message, url, lineNumber, columnNumber, error) {\r\n            var handled = originalOnError && originalOnError(message, url, lineNumber, columnNumber, error);\r\n            if (handled !== true) {\r\n                appInsights[\"_\" + method](message, url, lineNumber, columnNumber, error);\r\n            }\r\n\r\n            return handled;\r\n        };\r\n    }\r\n\r\n    return appInsights;\r\n})({\r\n    instrumentationKey: \"INSTRUMENTATION_KEY\"\r\n});\r\n\r\n// global instance must be set in this order to mitigate issues in ie8 and lower\r\nwindow.appInsights = appInsights;\r\nappInsights.trackPageView();\r\n"]}