{"version":3,"sources":["styles.js","scripts.js","site.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"site.js","sourcesContent":["// Performs tests to see if a stylesheet was loaded successfully, if the stylesheet failed to load, appends a new\n// link tag pointing to the local copy of the stylesheet before performing the next check.\n(function (window, document) {\n    \"use strict\";\n\n    var fallbacks = [\n        {\n            // metaName - The name of the meta tag that the test is performed on. The meta tag must have a class from the\n            //            relevant stylesheet on it so it is styled and a test can be performed against it. E.g. for\n            //            font awesome the <meta name=\"x-font-awesome-stylesheet-fallback-test\" class=\"fa\"> meta tag is\n            //            added. The 'fa' class causes the font awesome style to be applied to it.\n            metaName: \"x-font-awesome-stylesheet-fallback-test\",\n            // test - The test to perform against the meta tag. Checks to see if the Font awesome styles loaded\n            //        successfully by checking that the font-family of the meta tag is 'FontAwesome'.\n            test: function (meta) { \n                return window.getComputedStyle(meta, null).getPropertyValue('font-family') === \"FontAwesome\"; \n            },\n            // href - The URL to the fallback stylesheet.\n            href: \"/css/font-awesome.css\"\n        }\n    ];\n\n    var metas = document.getElementsByTagName(\"meta\");\n\n    for (var i = 0; i < fallbacks.length; ++i) {\n        var fallback = fallbacks[i];\n\n        for (var j = 0; j < metas.length; ++j) {\n            var meta = metas[j];\n            if (meta.getAttribute(\"name\") === fallback.metaName) {\n                if (!fallback.test(meta)) {\n                    var link = document.createElement(\"link\");\n                    link.href = fallback.href;\n                    link.rel = \"stylesheet\";\n                    document.getElementsByTagName(\"head\")[0].appendChild(link);\n                }\n                break;\n            }\n        }\n\n    }\n\n})(window, document);","// Performs tests to see if a script was loaded successfully, if the script failed to load, appends a new script tag\n// pointing to the local copy of the script and then waits for it to load before performing the next check.\n// Example: Bootstrap is dependant on jQuery. If loading jQuery from the CDN fails, this script loads the jQuery\n//          fallback and waits for it to finish loading before attempting the next fallback test.\n(function (document) {\n    \"use strict\";\n\n    var fallbacks = [\n        // test - Tests whether the script loaded successfully or not. Returns true if the script loaded successfully or\n        //        false if the script failed to load and the fallback is required.\n        // src - The URL to the fallback script.\n        { test: function () { return window.jQuery; }, src: \"/js/jquery.js\" },\n        { test: function () { return window.jQuery.validator; }, src: \"/js/jquery-validate.js\" },\n        { test: function () { return window.jQuery.validator.unobtrusive; }, src: \"/js/jquery-validate-unobtrusive.js\" },\n        { test: function () { return window.jQuery.fn.modal; }, src: \"/js/bootstrap.js\" }\n    ];\n\n    var check = function (fallbacks, i) {\n        if (i < fallbacks.length) {\n            var fallback = fallbacks[i];\n            if (fallback.test()) {\n                check(fallbacks, i + 1);\n            }\n            else {\n                var script = document.createElement(\"script\");\n                script.onload = function () {\n                    check(fallbacks, i + 1);\n                };\n                script.src = fallback.src;\n                document.getElementsByTagName(\"body\")[0].appendChild(script);\n            }\n        }\n    };\n    check(fallbacks, 0);\n\n})(document);","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*jslint node: true */\r\n/*jshint strict:false */\r\n/* jshint -W097 */\r\nvar Calculator = (function () {\r\n    function Calculator() {\r\n    }\r\n    Calculator.prototype.add = function (a, b) {\r\n        return a + b;\r\n    };\r\n    Calculator.prototype.subtract = function (a, b) {\r\n        return a - b;\r\n    };\r\n    Calculator.prototype.multiply = function (a, b) {\r\n        return a * b;\r\n    };\r\n    Calculator.prototype.divide = function (a, b) {\r\n        this.checkDivideByZero(b);\r\n        return a / b;\r\n    };\r\n    Calculator.prototype.checkDivideByZero = function (x) {\r\n        if ((x === 0) && this.throwOnDivideByZero) {\r\n            throw new Error(\"Divide by Zero.\");\r\n        }\r\n    };\r\n    return Calculator;\r\n}());\r\nexports.Calculator = Calculator;\r\n"]}